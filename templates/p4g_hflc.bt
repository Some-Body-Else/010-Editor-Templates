//  "I made this."
//  -Somebody Else

#include "common/include.h"

/*
    A quick explanation on what the hflc file is, at least from my observations.
    There is only one (that I am aware of) hflc file, labelled as filelist_hash.hflc.
    
    The game uses this file as a whitelist of sorts, comparing the file data loaded in with
    the data present within the list to see if it's allowed to be used.
    
    Each file has an associated 16-byte key that is generated by putting the
    entirety of the file through an algorithm and modifying a base key value of
    01 23 45 67 89 AB CD EF FE DC BA 98 76 54 32 10 with values from the content of the file.
    
    After generating the loaded file's key, it compares it to the list of keys it has to find a match.
    Unsure of any specifics in terms of the way it compares (has a method to check or bruteforces).
    If the generated key does not have a known match, the game will crash when loading the file.

    This failsafe is applied to all models, visual and collision, but unsure of what other files may
    use this. All files that are checked through this should be named, but I'm not combing through the
    9000+ entries by hand to figure out what's being compared to here.

*/

/*
    There are 0x25FB entries present within the file, with 0x0277 being unused and mostly zero'd out

    Each entry consists of the 16-byte file key, a 4-byte blank space, and a 4-byte value indicating
    which path entry corresponds to the file key.
*/
typedef struct {
    SetBackColor(0x33B5E9);
    u32 keyID[4] <format=hex, name="File Key">;
    SetBackColor(0xA31F8C);
    u32 blank;
    SetBackColor(0x7E5500);
    u32 entryNum <name="Entry Path Number">;
} entry_small <name="Entry">;

/*
    Before any series of entries, there is a 4-byte value that informs the game how many entries will
    be present in a given chunk

    Each chunk is split based upon what the first byte of its key is. For example, the first chunk has
    keys that start with 0x01, second chunk has keys that start with 0x02, and so on.

    First chunk that exists is technically for keys that start with 0x00, but all entry values in this
    chunk save one are zero'd out, so keys that start with this value are seemingly impossible.
    The only nonzero value in this chunk is the first entry having a filesize of 0x25F3, could be a 
    failsafe value for something in the game's code. Equally possible that the value is entirely vestigial.
*/

typedef struct {
    SetBackColor(0x007F00);
    u32 entryCount <name="Number of Entries">;
    local int i;
    for (i = 0; i < entryCount; i++)
    {
        entry_small entry;
    } 
} entry_small_chunk <name="Entry Chunk">;


/*
    The largest entries present within the file, each one taking up 0x220 bytes.

    Each entry consists of 0x104 bytes dedicated to a filepath, 0x104 bytes dedicated to a file name,
    0x10 bytes reserved for the file's key, 0x4 bytes of blank data, and 0x4 bytes containing the file's
    size.

    I'm unsure of the accuracy in regards to the filepath, but I haven't dealt with too many filepath
    related shennanigans, so someone else may want to clarify if these paths are accurate to what the
    game sees.

    There are also some blank entries present within, where every part of the entry is zero.
    We may be able to use this in addition to the whitespace entries to load in models under custom
    filenames and what not.
*/

typedef struct {
    SetBackColor(0x005F3A);
    string filepath <name="File Path">;

    local int fillSize = 0x103 - Strlen(filepath);
    char filler[fillSize] <name="Filler">;
    SetBackColor(0x56D837);
    string filename <name="File Name">;
    fillSize = 0x103 - Strlen(filename);
    char filler2[fillSize] <name="Filler">;
    SetBackColor(0x741912);
    u32 keyID[4] <format=hex, name="File Key">;
    u32 blank;
    SetBackColor(0x34BAA3);
    u32 fileSize <format=hex, name="File Size">;
} entry_path <name="Path Entry">;


void mapHFLC()
{
    local int i;    //Counter needed for chunk entries, due to unusual counting method in place

    SetBackColor(0x48037E);
    u32 EntryCount;             //Set at 0x000025FB

    i = 0;
    while (i < EntryCount)
    {
        entry_small_chunk chunk;
        //Since we create chunks, we need to count the individual entries seperately.
        i += chunk.entryCount;      
    }

    entry_path filepath[EntryCount]<optimize=false>;
}

SetBackColor(0x839F26);
u64 fileHeader <format=hex>;    //Header indicating that this is an HFLC file.

if (fileHeader != 0x00000000434C4648)
{
    Printf("Error! File is not filelist_hash.hflc\n");
    return;
}
mapHFLC();